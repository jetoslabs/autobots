name: CICD

on:
  push:
    branches:
      - 'main'
    tags:
      - '*'
  workflow_dispatch:

env:
  IMAGE_TAG: ${{ github.ref_name }}
  # Datadog Environment
  DD_ENV: ${{ github.ref_name }}
  # Datadog Version
  DD_VERSION: ${{ github.ref_name }}-${{ github.run_number }}
  # DO CI
  DO_CI: ${{ github.ref == 'refs/heads/main' && true || false }}
  # DO CD
  DO_CD: ${{ github.ref == 'refs/heads/main' && true || false }}

jobs:

  tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Prepare for Tests
        run: |
          pip3 install poetry
          poetry config virtualenvs.create false && poetry install --no-interaction --no-ansi

      - name: Run Tests
#        working-directory: ./tests
        run: |
          python -m pytest -vv -n 5
        env:
          ENV: ${{ secrets.ENV }}
          COOKIE_DOMAIN: ${{ secrets.COOKIE_DOMAIN }}
          ALLOW_ORIGINS: ${{ secrets.ALLOW_ORIGINS }}
          SQLALCHEMY_DATABASE_URL: ${{ secrets.SQLALCHEMY_DATABASE_URL }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
          MONGO_CONN: ${{ secrets.MONGO_CONN }}
          OPENAI_ORG_ID: ${{ secrets.OPENAI_ORG_ID }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          STABILITY_HOST: ${{ secrets.STABILITY_HOST }}
          STABILITY_KEY: ${{ secrets.STABILITY_KEY }}
          UNSPLASH_ACCESS_KEY: ${{ secrets.UNSPLASH_ACCESS_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_S3_BUCKET_NAME: ${{ secrets.AWS_S3_BUCKET_NAME }}
          AWS_S3_BUCKET_REGION: ${{ secrets.AWS_S3_BUCKET_REGION }}
          AWS_S3_PUBLIC_BUCKET_NAME: ${{ secrets.AWS_S3_PUBLIC_BUCKET_NAME }}
          AWS_S3_PUBLIC_BUCKET_IMAGE_FOLDER: ${{ secrets.AWS_S3_PUBLIC_BUCKET_IMAGE_FOLDER }}
          PINECONE_ENVIRONMENT: ${{ secrets.PINECONE_ENVIRONMENT }}
          PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}
          UNSTRUCTURED_API_KEY: ${{ secrets.UNSTRUCTURED_API_KEY }}

  build:
    if: ${{ github.ref == 'refs/heads/main' }}
    needs: [tests]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Login to GitLab Container Registry
        uses: docker/login-action@v1
        with:
          registry: registry.gitlab.com
          username: ${{ secrets.GITLAB_USERNAME }}
          password: ${{ secrets.GITLAB_TOKEN }}

      - name: Build Docker image
        run: docker build -t registry.gitlab.com/meetkiwi/autobots:${IMAGE_TAG} --build-arg DD_ENV=${DD_ENV} --build-arg DD_VERSION=${DD_VERSION} .

      - name: Push Docker image to GitLab Container Registry
        run: |
          docker push registry.gitlab.com/meetkiwi/autobots:${IMAGE_TAG}

  deploy:
    if: ${{ github.ref == 'refs/heads/main' }}
    needs: [build]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setting up lightsail.pem for ssh in Runner
        run: |
          echo "$LIGHTSAIL_SSH_KEY" > lightsail.pem
          chmod 600 lightsail.pem
          echo "cat lightsail.pem" && cat lightsail.pem
        env:
          LIGHTSAIL_SSH_KEY: ${{ secrets.LIGHTSAIL_AUTOBOTS_DEV_SSH_KEY }}

      - name: SSH and create docker network
        if: always()
        run: |
          ssh -o "StrictHostKeyChecking=no" -o "UserKnownHostsFile=/dev/null" -i ./lightsail.pem $LIGHTSAIL_USER@$LIGHTSAIL_IP -p 22 \
            docker network ls|grep autobots-network > /dev/null || docker network create autobots-network
        env:
          LIGHTSAIL_USER: ${{ secrets.LIGHTSAIL_AUTOBOTS_DEV_USERNAME }}
          LIGHTSAIL_IP: ${{ secrets.LIGHTSAIL_AUTOBOTS_DEV_IP }}

      - name: SSH and Remove Running container and image Datadog Agent
        if: always()
        run: |
          ssh -o "StrictHostKeyChecking=no" -o "UserKnownHostsFile=/dev/null" -i ./lightsail.pem $LIGHTSAIL_USER@$LIGHTSAIL_IP -p 22 \
            docker ps -a
          ssh -o "StrictHostKeyChecking=no" -o "UserKnownHostsFile=/dev/null" -i ./lightsail.pem $LIGHTSAIL_USER@$LIGHTSAIL_IP -p 22 \
            docker stop datadog-agent
          ssh -o "StrictHostKeyChecking=no" -o "UserKnownHostsFile=/dev/null" -i ./lightsail.pem $LIGHTSAIL_USER@$LIGHTSAIL_IP -p 22 \
            docker rm datadog-agent
          ssh -o "StrictHostKeyChecking=no" -o "UserKnownHostsFile=/dev/null" -i ./lightsail.pem $LIGHTSAIL_USER@$LIGHTSAIL_IP -p 22 \
            docker ps -a
          ssh -o "StrictHostKeyChecking=no" -o "UserKnownHostsFile=/dev/null" -i ./lightsail.pem $LIGHTSAIL_USER@$LIGHTSAIL_IP -p 22 \
            docker image prune -a -f
          ssh -o "StrictHostKeyChecking=no" -o "UserKnownHostsFile=/dev/null" -i ./lightsail.pem $LIGHTSAIL_USER@$LIGHTSAIL_IP -p 22 \
            docker images
        env:
          LIGHTSAIL_USER: ${{ secrets.LIGHTSAIL_AUTOBOTS_DEV_USERNAME }}
          LIGHTSAIL_IP: ${{ secrets.LIGHTSAIL_AUTOBOTS_DEV_IP }}

      - name: SSH and Run Docker image Datadog agent
        if: always()
        run: >
          ssh -o "StrictHostKeyChecking=no" -o "UserKnownHostsFile=/dev/null" -i ./lightsail.pem $LIGHTSAIL_USER@$LIGHTSAIL_IP -p 22 
          docker run -d --name datadog-agent 
          --net-alias datadog-agent 
          --network autobots-network 
          --expose 8126
          --cgroupns host 
          --pid host 
          -e DD_API_KEY=$DD_API_KEY 
          -e DD_LOGS_ENABLED=true 
          -e DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL=true 
          -e DD_LOGS_CONFIG_DOCKER_CONTAINER_USE_FILE=true
          -e DD_CONTAINER_EXCLUDE="name:datadog-agent" 
          -e DD_REMOTE_CONFIGURATION_ENABLED=true 
          -e DD_APM_ENABLED=true
          -e DD_APM_NON_LOCAL_TRAFFIC=true
          -e DD_SITE=$DD_SITE 
          -v /var/run/docker.sock:/var/run/docker.sock:ro 
          -v /var/lib/docker/containers:/var/lib/docker/containers:ro 
          -v /proc/:/host/proc/:ro 
          -v /opt/datadog-agent/run:/opt/datadog-agent/run:rw 
          -v /sys/fs/cgroup/:/host/sys/fs/cgroup:ro 
          gcr.io/datadoghq/agent:latest
        env:
          LIGHTSAIL_USER: ${{ secrets.LIGHTSAIL_AUTOBOTS_DEV_USERNAME }}
          LIGHTSAIL_IP: ${{ secrets.LIGHTSAIL_AUTOBOTS_DEV_IP }}
          DD_API_KEY: ${{ secrets.DD_API_KEY }}
          DD_SITE: ${{ secrets.DD_SITE }}

      - name: SSH and Login to Container Registry
        if: always()
        run: |
          ssh -o "StrictHostKeyChecking=no" -o "UserKnownHostsFile=/dev/null" -i ./lightsail.pem $LIGHTSAIL_USER@$LIGHTSAIL_IP -p 22 \
            docker login registry.gitlab.com -u ${{ secrets.GITLAB_USERNAME }} -p ${{ secrets.GITLAB_TOKEN }}
        env:
          LIGHTSAIL_USER: ${{ secrets.LIGHTSAIL_AUTOBOTS_DEV_USERNAME }}
          LIGHTSAIL_IP: ${{ secrets.LIGHTSAIL_AUTOBOTS_DEV_IP }}
          GITLAB_USERNAME: ${{ secrets.GITLAB_USERNAME }}
          GITLAB_TOKEN: ${{ secrets.GITLAB_TOKEN }}

      - name: SSH and Remove Running container and image
        if: always()
        run: |
          ssh -o "StrictHostKeyChecking=no" -o "UserKnownHostsFile=/dev/null" -i ./lightsail.pem $LIGHTSAIL_USER@$LIGHTSAIL_IP -p 22 \
            docker ps -a
          ssh -o "StrictHostKeyChecking=no" -o "UserKnownHostsFile=/dev/null" -i ./lightsail.pem $LIGHTSAIL_USER@$LIGHTSAIL_IP -p 22 \
            docker stop autobots
          ssh -o "StrictHostKeyChecking=no" -o "UserKnownHostsFile=/dev/null" -i ./lightsail.pem $LIGHTSAIL_USER@$LIGHTSAIL_IP -p 22 \
            docker rm autobots
          ssh -o "StrictHostKeyChecking=no" -o "UserKnownHostsFile=/dev/null" -i ./lightsail.pem $LIGHTSAIL_USER@$LIGHTSAIL_IP -p 22 \
            docker ps -a
          ssh -o "StrictHostKeyChecking=no" -o "UserKnownHostsFile=/dev/null" -i ./lightsail.pem $LIGHTSAIL_USER@$LIGHTSAIL_IP -p 22 \
            docker image prune -a -f
          ssh -o "StrictHostKeyChecking=no" -o "UserKnownHostsFile=/dev/null" -i ./lightsail.pem $LIGHTSAIL_USER@$LIGHTSAIL_IP -p 22 \
            docker images
        env:
          LIGHTSAIL_USER: ${{ secrets.LIGHTSAIL_AUTOBOTS_DEV_USERNAME }}
          LIGHTSAIL_IP: ${{ secrets.LIGHTSAIL_AUTOBOTS_DEV_IP }}

      - name: SSH and Pull Docker image
        if: always()
        run: |
          ssh -o "StrictHostKeyChecking=no" -o "UserKnownHostsFile=/dev/null" -i ./lightsail.pem $LIGHTSAIL_USER@$LIGHTSAIL_IP -p 22 \
            docker pull registry.gitlab.com/meetkiwi/autobots:${IMAGE_TAG}
        env:
          LIGHTSAIL_USER: ${{ secrets.LIGHTSAIL_AUTOBOTS_DEV_USERNAME }}
          LIGHTSAIL_IP: ${{ secrets.LIGHTSAIL_AUTOBOTS_DEV_IP }}

      - name: SSH and Run Docker image
        if: always()
        run: >
          ssh -o "StrictHostKeyChecking=no" -o "UserKnownHostsFile=/dev/null" -i ./lightsail.pem $LIGHTSAIL_USER@$LIGHTSAIL_IP -p 22 
          docker run -d --name autobots -p 80:80 
          --net-alias autobots 
          --network autobots-network 
          -e ENV=$ENV
          -e VERSION=${DD_VERSION}
          -e COOKIE_DOMAIN=$COOKIE_DOMAIN 
          -e ALLOW_ORIGINS=$ALLOW_ORIGINS 
          -e SQLALCHEMY_DATABASE_URL=$SQLALCHEMY_DATABASE_URL 
          -e SUPABASE_URL=$SUPABASE_URL 
          -e SUPABASE_ANON_KEY=$SUPABASE_ANON_KEY 
          -e JWT_SECRET_KEY=$JWT_SECRET_KEY 
          -e MONGO_CONN=$MONGO_CONN 
          -e OPENAI_ORG_ID=$OPENAI_ORG_ID 
          -e OPENAI_API_KEY=$OPENAI_API_KEY 
          -e STABILITY_HOST=$STABILITY_HOST 
          -e STABILITY_KEY=$STABILITY_KEY 
          -e UNSPLASH_ACCESS_KEY=$UNSPLASH_ACCESS_KEY 
          -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID 
          -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY 
          -e AWS_S3_BUCKET_NAME=$AWS_S3_BUCKET_NAME 
          -e AWS_S3_BUCKET_REGION=$AWS_S3_BUCKET_REGION 
          -e AWS_S3_PUBLIC_BUCKET_NAME=$AWS_S3_PUBLIC_BUCKET_NAME 
          -e AWS_S3_PUBLIC_BUCKET_IMAGE_FOLDER=$AWS_S3_PUBLIC_BUCKET_IMAGE_FOLDER 
          -e PINECONE_ENVIRONMENT=$PINECONE_ENVIRONMENT 
          -e PINECONE_API_KEY=$PINECONE_API_KEY 
          -e UNSTRUCTURED_API_KEY=$UNSTRUCTURED_API_KEY
          registry.gitlab.com/meetkiwi/autobots:${IMAGE_TAG}
        env:
          LIGHTSAIL_USER: ${{ secrets.LIGHTSAIL_AUTOBOTS_DEV_USERNAME }}
          LIGHTSAIL_IP: ${{ secrets.LIGHTSAIL_AUTOBOTS_DEV_IP }}
          ENV: ${{ secrets.ENV }}
          COOKIE_DOMAIN: ${{ secrets.COOKIE_DOMAIN }}
          ALLOW_ORIGINS: ${{ secrets.ALLOW_ORIGINS }}
          SQLALCHEMY_DATABASE_URL: ${{ secrets.SQLALCHEMY_DATABASE_URL }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
          MONGO_CONN: ${{ secrets.MONGO_CONN }}
          OPENAI_ORG_ID: ${{ secrets.OPENAI_ORG_ID }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          STABILITY_HOST: ${{ secrets.STABILITY_HOST }}
          STABILITY_KEY: ${{ secrets.STABILITY_KEY }}
          UNSPLASH_ACCESS_KEY: ${{ secrets.UNSPLASH_ACCESS_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_S3_BUCKET_NAME: ${{ secrets.AWS_S3_BUCKET_NAME }}
          AWS_S3_BUCKET_REGION: ${{ secrets.AWS_S3_BUCKET_REGION }}
          AWS_S3_PUBLIC_BUCKET_NAME: ${{ secrets.AWS_S3_PUBLIC_BUCKET_NAME }}
          AWS_S3_PUBLIC_BUCKET_IMAGE_FOLDER: ${{ secrets.AWS_S3_PUBLIC_BUCKET_IMAGE_FOLDER }}
          PINECONE_ENVIRONMENT: ${{ secrets.PINECONE_ENVIRONMENT }}
          PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}
          UNSTRUCTURED_API_KEY: ${{ secrets.UNSTRUCTURED_API_KEY }}
